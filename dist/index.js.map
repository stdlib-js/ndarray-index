{
  "version": 3,
  "sources": ["../lib/defaults.js", "../lib/kinds.json", "../lib/validate.js", "../lib/cache.js", "../lib/find.js", "../lib/id.js", "../lib/main.js", "../lib/factory.js", "../lib/cartesian.js", "../lib/linear.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} defaults\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'persist': false,\n\t\t'kind': ''\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "[\n  \"linear\",\n  \"cartesian\"\n]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar KINDS = require( './kinds.json' );\n\n\n// VARIABLES //\n\nvar isKind = contains( KINDS );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {boolean} [options.persist] - boolean indicating whether to continue persisting an index object after first usage\n* @param {string} [options.kind] - specifies whether a provided ndarray is a specialized kind of integer input ndarray\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'persist': false\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'persist' ) ) {\n\t\topts.persist = options.persist;\n\t\tif ( !isBoolean( opts.persist ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'persist', opts.persist ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kind' ) ) {\n\t\topts.kind = options.kind;\n\t\tif ( !isKind( opts.kind ) && opts.kind !== '' ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'kind', KINDS.join( '\", \"' ), opts.kind ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar LinkedList = require( '@stdlib/utils-linked-list' );\n\n\n// MAIN //\n\n/**\n* Cache for storing index objects.\n*\n* @private\n* @name cache\n* @type {LinkedList}\n*/\nvar cache = new LinkedList(); // note: created as a linked list to allow for more efficient removal of expired index objects\n\n\n// EXPORTS //\n\nmodule.exports = cache;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cache = require( './cache.js' );\n\n\n// MAIN //\n\n/**\n* Returns an index object associated with a specified identifier.\n*\n* @private\n* @param {*} id - identifier\n* @returns {(Node|null)} index object\n*/\nfunction find( id ) { // eslint-disable-line stdlib/no-redeclare\n\tvar node = cache.first();\n\twhile ( node ) {\n\t\tif ( node.value.id === id ) {\n\t\t\treturn node;\n\t\t}\n\t\tnode = node.next;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = find;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar COUNTER = -1; // TODO: consider another approach for unique identifier generation. For most cases, this should suffice; however, it is possible that two different libraries, both relying on separate copies of this package, may trigger id collisions in the event that instantiated instances were to interact (e.g., a consumer attempting to free an instance instantiated by another copy of the package, etc).\n\n\n// MAIN //\n\n/**\n* Generates a new identifier.\n*\n* @private\n* @returns {string} identifier\n*\n* @example\n* var v = id();\n* // returns <string>\n*/\nfunction id() {\n\tCOUNTER += 1;\n\treturn COUNTER.toString();\n}\n\n\n// EXPORTS //\n\nmodule.exports = id;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setNonEnumerable = require( '@stdlib/utils-define-nonenumerable-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar ndarraylike2ndarray = require( '@stdlib/ndarray-base-ndarraylike2ndarray' );\nvar dtype = require( '@stdlib/ndarray-base-dtype' );\nvar ndarray2json = require( '@stdlib/ndarray-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar cache = require( './cache.js' );\nvar findndindex = require( './find.js' );\nvar generateId = require( './id.js' );\n\n\n// MAIN //\n\n/**\n* ndarray index constructor.\n*\n* @constructor\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.persist=false] - boolean indicating whether to continue persisting an index object after first usage\n* @param {string} [options.kind=''] - specifies whether a provided ndarray is a specialized kind of integer input ndarray\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} first argument must be a valid index ndarray\n* @throws {TypeError} first argument must be compatible with a specified index \"kind\"\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndindex} ndindex instance\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*/\nfunction ndindex( x ) {\n\tvar opts;\n\tvar err;\n\tvar arr;\n\tvar dt;\n\tvar t;\n\tvar v;\n\tif ( !(this instanceof ndindex) ) {\n\t\tif ( arguments.length > 1 ) {\n\t\t\treturn new ndindex( x, arguments[ 1 ] );\n\t\t}\n\t\treturn new ndindex( x );\n\t}\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// Resolve index options:\n\topts = defaults();\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, arguments[ 1 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Normalize the input ndarray-like object by converting to a \"base\" ndarray:\n\tarr = ndarraylike2ndarray( x );\n\n\t// Resolve the input ndarray data type:\n\tdt = dtype( arr ); // note: as we've normalized to a \"base\" ndarray, there should always be a resolved data type\n\n\t// When provided a \"generic\" ndarray, attempt to infer the type of index ndarray...\n\tif ( dt === 'generic' ) {\n\t\tif ( arr.length > 0 ) {\n\t\t\tv = arr.iget( 0 ); // note: we assume that, even for zero-dimensional ndarrays, we can pass `0` as an argument to `#.iget`\n\n\t\t\t// Infer the \"type\" of index array from the first element...\n\t\t\tif ( isBoolean( v ) ) {\n\t\t\t\tt = 'bool';\n\t\t\t} else if ( isInteger( v ) ) {\n\t\t\t\tt = 'int';\n\t\t\t} else {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a valid index ndarray.' );\n\t\t\t}\n\t\t} else {\n\t\t\t// If we've been provided an empty ndarray, fallback to a default index type:\n\t\t\tt = 'int';\n\t\t}\n\t} else if ( dt === 'int64' || dt === 'int32' ) {\n\t\tt = 'int';\n\t} else if ( dt === 'uint8' ) {\n\t\tt = 'mask';\n\t} else if ( dt === 'bool' ) {\n\t\tt = 'bool';\n\t} else {\n\t\tthrow new TypeError( 'invalid argument. First argument must be a valid index ndarray.' );\n\t}\n\tif ( t !== 'int' && opts.kind !== '' ) { // note: here we assume that only integer ndarrays can have specialized \"kinds\"\n\t\tthrow new TypeError( format( 'invalid argument. First argument is not compatible with the specified index \"kind\". Type: %s. Kind: %s.', t, opts.kind ) );\n\t}\n\t// Add the ndarray index to the index cache:\n\tcache.push({\n\t\t'id': generateId(),\n\t\t'ref': this,\n\t\t'data': arr, // note: while we cache a reference to the normalized ndarray object, and not the original input ndarray-like object, we still hold onto memory, as the normalized object references the same underlying data buffer\n\t\t'type': t,\n\t\t'kind': opts.kind,\n\t\t'dtype': dt,\n\t\t'persist': opts.persist\n\t});\n\n\t// Store a reference to the cache node:\n\tsetReadOnly( this, '_node', cache.last() );\n\n\t// Initialize a boolean flag indicating whether an index object has been invalidated (i.e., freed):\n\tsetNonEnumerable( this, '_invalidated', false );\n\n\treturn this;\n}\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndindex\n* @readonly\n* @type {string}\n* @default 'ndindex'\n*\n* @example\n* var str = ndindex.name;\n* // returns 'ndindex'\n*/\nsetReadOnly( ndindex, 'name', 'ndindex' );\n\n/**\n* Frees an ndarray index object associated with a provided identifier.\n*\n* @name free\n* @memberof ndindex\n* @type {Function}\n* @param {string} id - identifier\n* @returns {boolean} boolean indicating whether an index object was successfully freed\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x, {\n*     'persist': true\n* });\n* // returns <ndindex>\n*\n* // ...\n*\n* var out = ndindex.free( idx.id );\n* // returns true\n*/\nsetReadOnly( ndindex, 'free', function free( id ) {\n\tvar node;\n\tvar v;\n\n\t// Retrieve the index object with the specified identifier:\n\tnode = findndindex( id );\n\tif ( node === null ) {\n\t\treturn false;\n\t}\n\tv = node.value;\n\n\t// Invalidate the index instance object:\n\tsetReadOnly( v.ref, '_invalidated', true );\n\n\t// Remove the index instance from the cache:\n\tcache.remove( node );\n\n\t// Remove the reference to the cached ndarray:\n\tv.data = null;\n\n\treturn true;\n});\n\n/**\n* Returns the ndarray associated with a provided identifier.\n*\n* @name get\n* @memberof ndindex\n* @type {Function}\n* @param {string} id - identifier\n* @returns {(Object|null)} object containing index data\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x, {\n*     'persist': true\n* });\n* // returns <ndindex>\n*\n* // ...\n*\n* var o = ndindex.get( idx.id );\n* // returns {...}\n*\n* var d = o.data;\n* // returns <ndarray>\n*\n* var t = o.type;\n* // returns 'mask'\n*\n* var dt = o.dtype;\n* // returns 'uint8'\n*/\nsetReadOnly( ndindex, 'get', function get( id ) {\n\tvar node;\n\tvar out;\n\tvar v;\n\n\t// Retrieve the index object with the specified identifier:\n\tnode = findndindex( id );\n\tif ( node === null ) {\n\t\treturn null;\n\t}\n\tv = node.value;\n\n\t// Assemble the output object:\n\tout = {\n\t\t'data': v.data,\n\t\t'type': v.type,\n\t\t'kind': v.kind,\n\t\t'dtype': v.dtype\n\t};\n\n\t// If the index object should not be persisted, go ahead and remove the object from the cache...\n\tif ( !v.persist ) {\n\t\tndindex.free( id ); // note: this should come last, after having retrieved all desired index node data\n\t}\n\treturn out;\n});\n\n/**\n* Returns the underlying data of an ndarray index object.\n*\n* @name data\n* @memberof ndindex.prototype\n* @readonly\n* @type {ndarray}\n* @throws {Error} index object is no longer valid\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var v = idx.data;\n* // returns <ndarray>\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'data', function get() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn this._node.value.data;\n});\n\n/**\n* Returns the underlying data type of an ndarray index object.\n*\n* @name dtype\n* @memberof ndindex.prototype\n* @readonly\n* @type {string}\n* @throws {Error} index object is no longer valid\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var t = idx.dtype;\n* // returns 'uint8'\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'dtype', function get() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn this._node.value.dtype;\n});\n\n/**\n* Returns the identifier associated with an ndarray index object.\n*\n* @name id\n* @memberof ndindex.prototype\n* @readonly\n* @type {string}\n* @throws {Error} index object is no longer valid\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var id = idx.id;\n* // returns <string>\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'id', function get() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn this._node.value.id;\n});\n\n/**\n* Returns a boolean indicating if an ndarray index object is actively cached.\n*\n* @name isCached\n* @memberof ndindex.prototype\n* @readonly\n* @type {boolean}\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var out = idx.isCached;\n* // returns true\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'isCached', function get() {\n\treturn !this._invalidated;\n});\n\n/**\n* Returns the ndarray index object \"kind\".\n*\n* @name kind\n* @memberof ndindex.prototype\n* @readonly\n* @type {string}\n* @throws {Error} index object is no longer valid\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'int32'\n* });\n*\n* var idx = new ndindex( x, {\n*     'kind': 'linear'\n* });\n* // returns <ndindex>\n*\n* var v = idx.kind;\n* // returns 'linear'\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'kind', function get() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn this._node.value.kind;\n});\n\n/**\n* Returns the type of an ndarray index object.\n*\n* @name type\n* @memberof ndindex.prototype\n* @readonly\n* @type {string}\n* @throws {Error} index object is no longer valid\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var t = idx.type;\n* // returns 'mask'\n*/\nsetReadOnlyAccessor( ndindex.prototype, 'type', function get() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn this._node.value.type;\n});\n\n/**\n* Serializes an ndarray index object to a string.\n*\n* @name toString\n* @memberof ndindex.prototype\n* @type {Function}\n* @throws {Error} index object is no longer valid\n* @returns {string} serialized index object\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var str = idx.toString();\n* // e.g., 'ndindex<0>'\n*/\nsetReadOnly( ndindex.prototype, 'toString', function toString() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn 'ndindex<' + this._node.value.id + '>';\n});\n\n/**\n* Serializes an ndarray index object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying an `ndindex` instance.\n*\n* @name toJSON\n* @memberof ndindex.prototype\n* @type {Function}\n* @throws {Error} index object is no longer valid\n* @returns {Object} serialized index object\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*\n* var o = idx.toJSON();\n* // returns { 'type': 'ndindex', 'kind': '', 'data': {...} }\n*/\nsetReadOnly( ndindex.prototype, 'toJSON', function toJSON() {\n\tif ( this._invalidated ) {\n\t\tthrow new Error( 'invalid operation. This ndarray index instance has already been freed and can no longer be used.' );\n\t}\n\treturn {\n\t\t'type': 'ndindex',\n\t\t'kind': this._node.value.kind,\n\t\t'data': ndarray2json( this._node.value.data )\n\t};\n});\n\n\n// EXPORTS //\n\nmodule.exports = ndindex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar ndindex = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for creating ndarray index objects having a specified \"kind\".\n*\n* @private\n* @param {string} kind - specialized index kind\n* @returns {Function} factory function\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var cartesianIndex = createFactory( 'cartesian' );\n* // returns <Function>\n*\n* var x = empty( [ 3, 2 ], {\n*     'dtype': 'int32'\n* });\n*\n* var idx = cartesianIndex( x );\n* // returns <ndindex>\n*/\nfunction createFactory( kind ) {\n\tvar f = factory;\n\tsetReadOnly( f, 'free', ndindex.free ); // `free` is a static method\n\tsetReadOnly( f, 'get', ndindex.get ); // `get` is a static method\n\treturn f;\n\n\t/**\n\t* Returns an ndarray index having a specialized \"kind\".\n\t*\n\t* @private\n\t* @param {ndarray} x - input ndarray\n\t* @param {Options} [options] - function options\n\t* @param {boolean} [options.persist=false] - boolean indicating whether to continue persisting an index object after first usage\n\t* @throws {TypeError} first argument must be an ndarray-like object\n\t* @throws {TypeError} first argument must be a valid index ndarray\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {ndindex} ndindex instance\n\t*/\n\tfunction factory( x ) {\n\t\tvar options;\n\t\tvar opts;\n\n\t\topts = {\n\t\t\t'kind': kind\n\t\t};\n\t\tif ( arguments.length < 2 ) {\n\t\t\treturn new ndindex( x, opts );\n\t\t}\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'persist' ) ) {\n\t\t\topts.persist = options.persist;\n\t\t}\n\t\treturn new ndindex( x, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = createFactory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar createFactory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an ndarray index containing Cartesian indices.\n*\n* @name cartesianIndex\n* @type {Function}\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.persist=false] - boolean indicating whether to continue persisting an index object after first usage\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} first argument must be a valid index ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndindex} ndindex instance\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 3, 2 ], {\n*     'dtype': 'int32'\n* });\n*\n* var idx = cartesianIndex( x );\n* // returns <ndindex>\n*/\nvar cartesianIndex = createFactory( 'cartesian' );\n\n\n// EXPORTS //\n\nmodule.exports = cartesianIndex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar createFactory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns an ndarray index for indices representing locations in linear memory.\n*\n* @name linearIndex\n* @type {Function}\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {boolean} [options.persist=false] - boolean indicating whether to continue persisting an index object after first usage\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} first argument must be a valid index ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {ndindex} ndindex instance\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'int32'\n* });\n*\n* var idx = linearIndex( x );\n* // returns <ndindex>\n*/\nvar linearIndex = createFactory( 'linear' );\n\n\n// EXPORTS //\n\nmodule.exports = linearIndex;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* ndarray index constructor.\n*\n* @module @stdlib/ndarray-index\n*\n* @example\n* var empty = require( '@stdlib/ndarray-empty' );\n* var ndindex = require( '@stdlib/ndarray-index' );\n*\n* var x = empty( [ 10 ], {\n*     'dtype': 'uint8'\n* });\n*\n* var idx = new ndindex( x );\n* // returns <ndindex>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar cartesianIndex = require( './cartesian.js' );\nvar linearIndex = require( './linear.js' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'cartesianIndex', cartesianIndex );\nsetReadOnly( main, 'linearIndex', linearIndex );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"cartesianIndex\": \"main.cartesianIndex\", \"linearIndex\": \"main.linearIndex\", \"free\": \"main.free\", \"get\": \"main.get\" }\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_kinds", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "contains", "format", "KINDS", "isKind", "validate", "opts", "options", "require_cache", "__commonJSMin", "exports", "module", "LinkedList", "cache", "require_find", "__commonJSMin", "exports", "module", "cache", "find", "id", "node", "require_id", "__commonJSMin", "exports", "module", "COUNTER", "id", "require_main", "__commonJSMin", "exports", "module", "setReadOnlyAccessor", "setReadOnly", "setNonEnumerable", "isndarrayLike", "isBoolean", "isInteger", "ndarraylike2ndarray", "dtype", "ndarray2json", "format", "defaults", "validate", "cache", "findndindex", "generateId", "ndindex", "x", "opts", "err", "arr", "dt", "t", "id", "node", "v", "out", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "isObject", "hasOwnProp", "format", "ndindex", "createFactory", "kind", "f", "factory", "x", "options", "opts", "require_cartesian", "__commonJSMin", "exports", "module", "createFactory", "cartesianIndex", "require_linear", "__commonJSMin", "exports", "module", "createFactory", "linearIndex", "setReadOnly", "cartesianIndex", "linearIndex", "main"]
}
